/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateIdentityArgs } from "./CreateIdentityArgs";
import { UpdateIdentityArgs } from "./UpdateIdentityArgs";
import { DeleteIdentityArgs } from "./DeleteIdentityArgs";
import { IdentityCountArgs } from "./IdentityCountArgs";
import { IdentityFindManyArgs } from "./IdentityFindManyArgs";
import { IdentityFindUniqueArgs } from "./IdentityFindUniqueArgs";
import { Identity } from "./Identity";
import { IdentityService } from "../identity.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Identity)
export class IdentityResolverBase {
  constructor(
    protected readonly service: IdentityService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Identity",
    action: "read",
    possession: "any",
  })
  async _identitiesMeta(
    @graphql.Args() args: IdentityCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Identity])
  @nestAccessControl.UseRoles({
    resource: "Identity",
    action: "read",
    possession: "any",
  })
  async identities(
    @graphql.Args() args: IdentityFindManyArgs
  ): Promise<Identity[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Identity, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Identity",
    action: "read",
    possession: "own",
  })
  async identity(
    @graphql.Args() args: IdentityFindUniqueArgs
  ): Promise<Identity | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Identity)
  @nestAccessControl.UseRoles({
    resource: "Identity",
    action: "create",
    possession: "any",
  })
  async createIdentity(
    @graphql.Args() args: CreateIdentityArgs
  ): Promise<Identity> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Identity)
  @nestAccessControl.UseRoles({
    resource: "Identity",
    action: "update",
    possession: "any",
  })
  async updateIdentity(
    @graphql.Args() args: UpdateIdentityArgs
  ): Promise<Identity | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Identity)
  @nestAccessControl.UseRoles({
    resource: "Identity",
    action: "delete",
    possession: "any",
  })
  async deleteIdentity(
    @graphql.Args() args: DeleteIdentityArgs
  ): Promise<Identity | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
